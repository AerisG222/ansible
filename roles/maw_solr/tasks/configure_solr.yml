---
# ideally we would create an 'empty' solr instance and exclusively use the schema api to configure the core
# from scratch.  however, there are a few things which do not seem to be possible just using the api, so
# instead, we do some dirty deeds to setup the core we want.  for example, here is an issue on jira which
# suggests that setting uniqueKey via api will likely never be available:
# https://issues.apache.org/jira/browse/SOLR-7242
- name: create multimedia-categories core
  ansible.builtin.command:
    cmd: "podman exec -it {{ maw_solr__container }} solr create_core -c multimedia-categories"
  changed_when: true
  ignore_errors: true
  tags: skip_ansible_lint

# this step broke for some reason in prod, but worked fine locally - it errored w/ 404 and i couldn't figure out why
# update: i think this worked in older versions of solr, but is now failing with the latest container image
#- name: disable data driven schema
#  ansible.builtin.command:
#    cmd: "podman exec -it {{ maw_solr__container }} solr config -c multimedia-categories -p 8983 -action set-user-property -property update.autoCreateFields -value false"
#  changed_when: true

# seeing the above no longer seems to work, we call the api directly via curl
# see: https://solr.apache.org/guide/solr/latest/configuration-guide/config-api.html#creating-and-updating-user-defined-properties
- name: disable data driven schema
  ansible.builtin.command:
    cmd: "podman exec -it {{ maw_solr__container }} curl -X POST -H 'Content-type:application/json' -d '{\"set-user-property\": { \"update.autoCreateFields\": \"false\" }}' http://localhost:8983/solr/multimedia-categories/config"
  changed_when: true

- name: fix solr volume ownership / selinux context (part 1)
  ansible.builtin.include_tasks: fix_solr_volume.yml

- name: Ensure temp dir exists
  ansible.builtin.file:
    path: "{{ maw_solr__tempdir }}"
    state: directory
    mode: u+rw

- name: Copy synonym file
  ansible.builtin.copy:
    src: synonyms.txt
    dest: "{{ maw_solr__tempdir }}"
    mode: u+rw

- name: configure synonyms
  ansible.builtin.include_role:
    name: podman_copy
  vars:
    pod_cp__src_dir_or_volume: "{{ maw_solr__tempdir }}"
    pod_cp__dest_dir_or_volume: "{{ maw_solr__volume }}"
    pod_cp__command: cp /src/synonyms.txt /dest/data/multimedia-categories/conf

- name: fix solr volume ownership / selinux context (part 2)
  ansible.builtin.include_tasks: fix_solr_volume.yml

- name: cleanup temp dir
  ansible.builtin.file:
    path: "{{ maw_solr__tempdir }}"
    state: absent

- name: reload core for synonyms to take effect
  ansible.builtin.include_tasks: reload_core.yml

- name: add / update unique key
  ansible.builtin.include_tasks: define_field.yml
  loop_control:
    label: "{{ item.name }}"
  loop:
    - name: solr_id
      type: string
      uninvertible: true
      indexed: true
      stored: true
      required: true

- name: redefine unique key
  ansible.builtin.command:
    cmd: "podman exec -it {{ maw_solr__container }} sed -i -E 's/(<uniqueKey>)id(<.uniqueKey>)/\\1solr_id\\2/' /var/solr/data/multimedia-categories/conf/managed-schema.xml"
  changed_when: true

- name: reload core after updating unique key
  ansible.builtin.include_tasks: reload_core.yml

- name: add fields to schema
  ansible.builtin.include_tasks: define_field.yml
  loop_control:
    label: "{{ item.name }}"
  loop:
    - name: camera_makes
      type: strings
      uninvertible: true
      indexed: true
      stored: true
    - name: camera_models
      type: strings
      uninvertible: true
      indexed: true
      stored: true
    - name: comment_entry_dates
      type: pdates
      uninvertible: true
      indexed: true
      stored: true
    - name: comment_messages
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: gps_coordinate
      type: location
      uninvertible: true
      indexed: true
      stored: true
    - name: gps_latitude
      type: pfloat
      uninvertible: true
      indexed: true
      stored: true
    - name: gps_longitude
      type: pfloat
      uninvertible: true
      indexed: true
      stored: true
    - name: id
      type: pint
      uninvertible: false
      indexed: false
      stored: true
      required: true
    - name: allowed_roles
      type: strings
      uninvertible: true
      indexed: true
      stored: true
      required: true
    - name: name
      type: text_en_splitting
      uninvertible: true
      indexed: true
      stored: true
      required: true
    - name: poi_names
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: poi_types
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_administrative_area_level_1
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_administrative_area_level_2
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_administrative_area_level_3
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_country
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_formatted_address
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_locality
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_neighborhood
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_postal_code
      type: strings
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_postal_code_suffix
      type: strings
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_premise
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_route
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_street_number
      type: strings
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_sub_locality_level_1
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_sub_locality_level_2
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_sub_premise
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: teaser_photo_height
      type: pint
      uninvertible: false
      indexed: false
      stored: true
      required: true
    - name: teaser_photo_path
      type: string
      uninvertible: false
      indexed: false
      stored: true
      required: true
    - name: teaser_photo_sq_height
      type: pint
      uninvertible: false
      indexed: false
      stored: true
      required: true
    - name: teaser_photo_sq_path
      type: string
      uninvertible: false
      indexed: false
      stored: true
      required: true
    - name: teaser_photo_sq_width
      type: pint
      uninvertible: false
      indexed: false
      stored: true
      required: true
    - name: teaser_photo_width
      type: pint
      uninvertible: false
      indexed: false
      stored: true
      required: true
    - name: type
      type: string
      uninvertible: false
      indexed: false
      stored: true
      required: true
    - name: year
      type: pint
      uninvertible: true
      indexed: true
      stored: true
      required: true

- name: define custom handler
  ansible.builtin.set_fact:
    maw_request_handler_definition:
      name: /maw-photos-query
      class: solr.SearchHandler
      defaults:
        rows: 24
        echoParams: explicit
        sort: score desc, year desc, name asc
        defType: edismax
        q.alt: '*:*'
        wt: json
        qf: |
              allowed_roles
              type
              name^10
              year

              camera_makes
              camera_models

              comment_messages^4

              poi_names^8
              poi_types^4

              rg_administrative_area_level_1^2
              rg_administrative_area_level_2^2
              rg_administrative_area_level_3^2
              rg_country^2
              rg_formatted_address
              rg_locality^3
              rg_neighborhood^3
              rg_postal_code
              rg_premise
              rg_route
              rg_sub_locality_level_1
              rg_sub_locality_level_2
        fl: |
              solr_id
              id
              year
              name
              type
              teaser_photo_height
              teaser_photo_width
              teaser_photo_path
              teaser_photo_sq_height
              teaser_photo_sq_width
              teaser_photo_sq_path
              score

- name: check if custom request handler is defined
  ansible.builtin.command:
    cmd: "podman exec -it {{ maw_solr__container }} curl 'http://localhost:8983/solr/multimedia-categories/config/requestHandler?componentName=/maw-photos-query'"
  changed_when: false
  register: solr_handler_exists_result

- name: prepare check result into a variable
  ansible.builtin.set_fact:
    solr_handler_check_result: "{{ solr_handler_exists_result.stdout | from_json }}"

- name: add handler if it does not exist
  ansible.builtin.command:
    cmd: "podman exec -it {{ maw_solr__container }} curl -X POST -H 'Content-type:application/json' --data-binary '{ \"add-requesthandler\": {{ maw_request_handler_definition | to_json }} }' 'http://localhost:8983/solr/multimedia-categories/config'"
  when: solr_handler_check_result['error'] is defined

- name: update handler if different
  ansible.builtin.command:
    cmd: "podman exec -it {{ maw_solr__container }} curl -X POST -H 'Content-type:application/json' --data-binary '{ \"update-requesthandler\": {{ maw_request_handler_definition | to_json }} }' 'http://localhost:8983/solr/multimedia-categories/config'"
  when: not (solr_handler_check_result['error'] is defined)

- name: reload core for good measure
  ansible.builtin.include_tasks: reload_core.yml
