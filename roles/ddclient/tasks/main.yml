---
- name: "Temporarily set SSH username to {{ ddclient_svc_account }}"
  ansible.builtin.set_fact:
    orig_ansible_user: "{{ ansible_user }}"
    ansible_user: "{{ ddclient_svc_account }}"
  changed_when: false
  delegate_to: localhost

- name: Create ddclient config volume
  containers.podman.podman_volume:
    name: ddclient_config
    state: present
  register: ddclient_volume

- name: Prepare ddclient.conf
  ansible.builtin.template:
    src: ddclient.conf.j2
    dest: ddclient.conf

- name: Copy ddclient.conf to volume
  ansible.builtin.include_role:
    name: podman_copy_to_volume
  vars:
    volume_name: ddclient_config
    src_path: ddclient.conf

- name: Delete temp file
  ansible.builtin.file:
    path: ddclient.conf
    state: absent

# stop pod via systemd, otherwise systemd and podman fight
- name: "Disable {{ ddclient_pod_name }} via systemd"
  ansible.builtin.systemd:
    name: "pod-{{ ddclient_pod_name }}"
    enabled: no
    state: stopped
    scope: user
  ignore_errors: true # nothing to stop if it doesn't exist

- name: Create ddclient-pod
  containers.podman.podman_pod:
    name: "{{ ddclient_pod_name }}"
    state: started

- name: Create ddclient-container
  containers.podman.podman_container:
    name: "{{ ddclient_container_name }}"
    image: docker.io/linuxserver/ddclient
    pod: "{{ ddclient_pod_name }}"
    volume: ddclient_config:/config
    state: started
    label:
      io.containers.autoupdate: image

- name: Create systemd unit files
  containers.podman.podman_pod:
    name: "{{ ddclient_pod_name }}"
    generate_systemd:
      new: true
      path: .config/systemd/user

- name: Enable ddclient via systemd
  ansible.builtin.systemd:
    name: "pod-{{ ddclient_pod_name }}"
    enabled: true
    state: started
    scope: user
    daemon_reload: true

- name: "Reset SSH username to {{ orig_ansible_user }}"
  ansible.builtin.set_fact:
    ansible_user: "{{ orig_ansible_user }}"
  changed_when: false
  delegate_to: localhost
