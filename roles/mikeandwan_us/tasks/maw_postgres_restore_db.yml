- name: "test if {{ db_name }} database exists"
  containers.podman.podman_container:
    name: "{{ mawus_config.env }}-maw-pginit-restore-test"
    pod: "{{ mawus_config.podman_podname }}"
    image: "{{ mawus_config.podman_image_postgres }}"
    env_file: "{{ mawus_config.podman_env_dir }}/maw-postgres.env"
    command:
      - psql
      - '-h'
      - 127.0.0.1
      - '-U'
      - postgres
      - '-d'
      - "{{ db_name }}"
      - '-c'
      - SELECT 1;
    state: started
  ignore_errors: true
  tags: skip_ansible_lint

- name: "get {{ db_name }} exists test result"
  ansible.builtin.include_tasks: wait_for_container_to_stop.yml
  vars:
    container_name: "{{ mawus_config.env }}-maw-pginit-restore-test"
    exit_code_varname: sql_test_result

- name: set variable to determine if restore steps should be executed
  ansible.builtin.set_fact:
    do_restore_steps: "{{ sql_test_result | int == 2 }}"

- name: "restore {{ db_name }} database"
  containers.podman.podman_container:
    name: "{{ mawus_config.env }}-maw-pginit-restore"
    pod: "{{ mawus_config.podman_podname }}"
    image: "{{ mawus_config.podman_image_postgres }}"
    env_file: "{{ mawus_config.podman_env_dir }}/maw-postgres.env"
    command: "pg_restore -h 127.0.0.1 -U postgres -C -d postgres /postgres_backup/{{ backup_file }}"
    state: started
    interactive: true
    security_opt:
      - label=disable
    volume:
      - "{{ pg_backup_dir }}:/postgres_backup:ro"
  when: do_restore_steps

- name: "wait for {{ db_name }} restore"
  ansible.builtin.include_tasks: wait_for_container_to_stop.yml
  vars:
    container_name: "{{ mawus_config.env }}-maw-pginit-restore"
    exit_code_varname: restore_result
  when: do_restore_steps

- name: fail if restore failed
  ansible.builtin.fail:
    msg: "failed to restore database {{ db_name }}"
  failed_when: restore_result | int != 0
  when: do_restore_steps

- name: "optimize {{ db_name }} database"
  containers.podman.podman_container:
    name: "{{ mawus_config.env }}-maw-pginit-optimize"
    pod: "{{ mawus_config.podman_podname }}"
    image: "{{ mawus_config.podman_image_postgres }}"
    env_file: "{{ mawus_config.podman_env_dir }}/maw-postgres.env"
    command:
      - psql
      - '-h'
      - 127.0.0.1
      - '-U'
      - postgres
      - '-d'
      - "{{ db_name }}"
      - '-c'
      - VACUUM ANALYZE;
    state: started
    interactive: true
  when: do_restore_steps

- name: wait for idsrv optimization
  ansible.builtin.include_tasks: wait_for_container_to_stop.yml
  vars:
    container_name: "{{ mawus_config.env }}-maw-pginit-optimize"
    exit_code_varname: optimize_result
  when: do_restore_steps

- name: fail if optimization failed
  ansible.builtin.fail:
    msg: "failed to optimize database {{ db_name }}"
  failed_when: optimize_result | int != 0
  when: do_restore_steps
