- name: create multimedia-categories core
  ansible.builtin.command:
    cmd: "podman exec -it {{ solr_container.container.Name }} solr create_core -c multimedia-categories"
  ignore_errors: true

- name: disable data driven schema
  ansible.builtin.command:
    cmd: "podman exec -it {{ solr_container.container.Name }} solr config -c multimedia-categories -p 8983 -action set-user-property -property update.autoCreateFields -value false"

- name: prepare source file path
  ansible.builtin.set_fact:
    src_path: "{{ role_path }}/files/solr_synonyms.txt"

- name: configure synonyms
  ansible.builtin.include_role:
    name: podman_copy_to_volume
  vars:
    volume_name: "{{ solr_volume.volume.Name }}"
    dest_relative_path: data/multimedia-categories/conf/synonyms.txt

- name: reload core for synonyms to take effect
  ansible.builtin.command:
    cmd: "podman exec -it {{ solr_container.container.Name }} curl 'http://127.0.0.1:8983/solr/admin/cores?action=RELOAD&core=multimedia-categories'"

- name: add / update unique key
  ansible.builtin.include_tasks: solr_define_field.yml
  loop_control:
    label: "{{ item.name }}"
  loop:
    - name: solr_id
      type: string
      uninvertible: true
      indexed: true
      stored: true
      required: true

- name: redefine unique key
  ansible.builtin.command:
    cmd: "podman exec -it {{ solr_container.container.Name }} sed -i -E 's/(<uniqueKey>)id(<.uniqueKey>)/\\1solr_id\\2/' /var/solr/data/multimedia-categories/conf/managed-schema"

- name: reload core so we don't loose the edit of updating the unique key
  ansible.builtin.command:
    cmd: "podman exec -it {{ solr_container.container.Name }} curl 'http://127.0.0.1:8983/solr/admin/cores?action=RELOAD&core=multimedia-categories'"

- name: add fields to schema
  ansible.builtin.include_tasks: solr_define_field.yml
  loop_control:
    label: "{{ item.name }}"
  loop:
    - name: camera_makes
      type: strings
      uninvertible: true
      indexed: true
      stored: true
    - name: camera_models
      type: strings
      uninvertible: true
      indexed: true
      stored: true
    - name: comment_entry_dates
      type: pdates
      uninvertible: true
      indexed: true
      stored: true
    - name: comment_messages
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: gps_coordinate
      type: location
      uninvertible: true
      indexed: true
      stored: true
    - name: gps_latitude
      type: pfloat
      uninvertible: true
      indexed: true
      stored: true
    - name: gps_longitude
      type: pfloat
      uninvertible: true
      indexed: true
      stored: true
    - name: id
      type: pint
      uninvertible: false
      indexed: false
      stored: true
      required: true
    - name: allowed_roles
      type: strings
      uninvertible: true
      indexed: true
      stored: true
      required: true
    - name: name
      type: text_en_splitting
      uninvertible: true
      indexed: true
      stored: true
      required: true
    - name: poi_names
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: poi_types
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_administrative_area_level_1
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_administrative_area_level_2
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_administrative_area_level_3
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_country
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_formatted_address
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_locality
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_neighborhood
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_postal_code
      type: strings
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_postal_code_suffix
      type: strings
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_premise
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_route
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_street_number
      type: strings
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_sub_locality_level_1
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_sub_locality_level_2
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: rg_sub_premise
      type: text_en_splitting
      multiValued: true
      uninvertible: true
      indexed: true
      stored: true
    - name: teaser_photo_height
      type: pint
      uninvertible: false
      indexed: false
      stored: true
      required: true
    - name: teaser_photo_path
      type: string
      uninvertible: false
      indexed: false
      stored: true
      required: true
    - name: teaser_photo_sq_height
      type: pint
      uninvertible: false
      indexed: false
      stored: true
      required: true
    - name: teaser_photo_sq_path
      type: string
      uninvertible: false
      indexed: false
      stored: true
      required: true
    - name: teaser_photo_sq_width
      type: pint
      uninvertible: false
      indexed: false
      stored: true
      required: true
    - name: teaser_photo_width
      type: pint
      uninvertible: false
      indexed: false
      stored: true
      required: true
    - name: type
      type: string
      uninvertible: false
      indexed: false
      stored: true
      required: true
    - name: year
      type: pint
      uninvertible: true
      indexed: true
      stored: true
      required: true

- name: define custom handler
  ansible.builtin.set_fact:
    maw_request_handler_definition:
      name: /maw-photos-query
      class: solr.SearchHandler
      defaults:
        rows: 24
        echoParams: explicit
        sort: score desc, year desc, name asc
        defType: edismax
        q.alt: '*:*'
        wt: json
        qf: |
              allowed_roles
              type
              name^10
              year

              camera_makes
              camera_models

              comment_messages^4

              poi_names^8
              poi_types^4

              rg_administrative_area_level_1^2
              rg_administrative_area_level_2^2
              rg_administrative_area_level_3^2
              rg_country^2
              rg_formatted_address
              rg_locality^3
              rg_neighborhood^3
              rg_postal_code
              rg_premise
              rg_route
              rg_sub_locality_level_1
              rg_sub_locality_level_2
        fl: |
              solr_id
              id
              year
              name
              type
              teaser_photo_height
              teaser_photo_width
              teaser_photo_path
              teaser_photo_sq_height
              teaser_photo_sq_width
              teaser_photo_sq_path
              score

- name: set request handler definition
  ansible.builtin.set_fact:
    maw_request_handler_definition: "{{ lookup('file', 'solr_request_handler.json') }}"

- name: see if custom request handler is defined
  ansible.builtin.command:
    cmd: "podman exec -it local-maw-solr curl 'http://localhost:8983/solr/multimedia-categories/config/requestHandler?componentName=/maw-photos-query'"
  register: solr_handler_exists_result

- name: add handler if it does not exist
  ansible.builtin.command:
    cmd: "podman exec -it local-maw-solr curl -X POST -H 'Content-type:application/json' --data-binary '{ \"add-requesthandler\": {{ maw_request_handler_definition | to_json }} }' 'http://localhost:8983/solr/multimedia-categories/config'"
  when: not (solr_handler_exists_result.stdout | from_json).config.requestHandler['/maw-photos-query']

- name: update handler if different
  ansible.builtin.command:
    cmd: "podman exec -it local-maw-solr curl -X POST -H 'Content-type:application/json' --data-binary '{ \"update-requesthandler\": {{ maw_request_handler_definition | to_json }} }' 'http://localhost:8983/solr/multimedia-categories/config'"
  when: (solr_handler_exists_result.stdout | from_json).config.requestHandler['/maw-photos-query'] and maw_request_handler_definition != (solr_handler_exists_result.stdout | from_json).config.requestHandler['/maw-photos-query']

- name: reload core for good measure
  ansible.builtin.command:
    cmd: "podman exec -it local-maw-solr curl 'http://127.0.0.1:8983/solr/admin/cores?action=RELOAD&core=multimedia-categories'"

- name: run indexer
  ansible.builtin.systemd:
    name: solr-indexer.service
    enabled: no
    state: started
    scope: user
