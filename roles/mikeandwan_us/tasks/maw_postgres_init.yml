---
- name: copy roles backup so we can edit
  ansible.builtin.copy:
    src: "{{ mawus_config.pg_backup_host_dir }}/{{ mawus_config.pg_backup_roles }}"
    dest: "{{ mawus_config.pg_backup_host_dir }}/{{ mawus_config.pg_backup_roles }}.safer.sql"
    force: true
  delegate_to: localhost

- name: make the role backup script more tolerant of existing users
  ansible.builtin.command:
    argv:
      - sed
      - -i
      - -E
      - "s/CREATE ROLE (.+);/\\nDO \\$\\$\\nBEGIN\\nCREATE ROLE \\1;\\nEXCEPTION WHEN duplicate_object THEN RAISE NOTICE '%, skipping', SQLERRM USING ERRCODE = SQLSTATE;\\nEND\\n\\$\\$;\\n/g"
      - "{{ mawus_config.pg_backup_host_dir }}/{{ mawus_config.pg_backup_roles }}.safer.sql"
  delegate_to: localhost

- name: remote preparation (copy files to remote if needed)
  block:

    - name: set backup dir
      ansible.builtin.set_fact:
        pg_backup_dir: ./postgres_backups

    - name: "prepare {{ pg_backup_dir }} directory"
      ansible.builtin.file:
        path: "{{ pg_backup_dir }}"
        state: directory

    - name: copy backup files
      ansible.builtin.copy:
        src: "{{ mawus_config.pg_backup_host_dir }}"
        dest: "{{ pg_backup_dir }}"

  when: ansible_connection != 'local'

- name: local preparation
  block:

    - name: set backup dir
      ansible.builtin.set_fact:
        pg_backup_dir: "{{ mawus_config.pg_backup_host_dir }}"

  when: ansible_connection == 'local'

- name: create roles
  containers.podman.podman_container:
    name: "{{ mawus_config.env }}-maw-pginit-roles"
    pod: "{{ mawus_config.podman_podname }}"
    image: "docker.io/postgres:{{ mawus_config.version_postgres }}"
    env_file: "{{ mawus_config.podman_env_dir }}/maw-postgres.env"
    command: "psql -h 127.0.0.1 -U postgres -v ON_ERROR_STOP=1 -f /postgres_backup/{{ mawus_config.pg_backup_roles }}.safer.sql"
    state: started
    interactive: true
    security_opt:
      - label=disable
    volume:
      - "{{ pg_backup_dir }}:/postgres_backup:ro"

- name: get create_roles result
  ansible.builtin.include_tasks: wait_for_container_to_stop.yml
  vars:
    container_name: "{{ mawus_config.env }}-maw-pginit-roles"
    exit_code_varname: create_roles_result

- name: fail if roles not created
  ansible.builtin.fail:
    msg: roles were not successfully created
  failed_when: create_roles_result | int != 0

- name: set role passwords block
  ansible.builtin.include_tasks: maw_postgres_set_role_password.yml
  loop_control:
    label: "{{ item.username }}"
  loop:
    - username: "{{ mawus_config.sql_username }}"
      password: "{{ mawus_config.sql_password }}"
    - username: "{{ mawus_config.sql_solr_username }}"
      password: "{{ mawus_config.sql_solr_password }}"

- name: restore idsrv if needed
  ansible.builtin.include_tasks: maw_postgres_restore_db.yml
  vars:
    db_name: idsrv
    backup_file: "{{ mawus_config.pg_backup_idsrv }}"

- name: restore maw_website if needed
  ansible.builtin.include_tasks: maw_postgres_restore_db.yml
  vars:
    db_name: maw_website
    backup_file: "{{ mawus_config.pg_backup_www }}"

- name: "remove temp {{ pg_backup_dir }} directory for remote connections"
  ansible.builtin.file:
    path: "{{ pg_backup_dir }}"
    state: absent
  when: ansible_connection != 'local'

- name: clean safer role script file
  ansible.builtin.file:
    path: "{{ mawus_config.pg_backup_host_dir }}/{{ mawus_config.pg_backup_roles }}.safer.sql"
    state: absent
  delegate_to: localhost
