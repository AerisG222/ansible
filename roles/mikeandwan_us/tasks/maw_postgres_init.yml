---
- name: remote preparation (copy files to remote if needed)
  block:

    - name: set init dir
      ansible.builtin.set_fact:
        pginit_dir: ./postgres_init

    - name: "prepare {{ pginit_dir }} directory"
      ansible.builtin.file:
        path: "{{ pginit_dir }}"
        state: directory

    - name: copy backup files
      ansible.builtin.copy:
        src: "{{ mawus_config.pg_backup_host_dir }}"
        dest: "{{ pginit_dir }}"

  when: ansible_connection != 'local'

- name: local preparation
  block:

    - name: set init dir
      ansible.builtin.set_fact:
        pginit_dir: "{{ mawus_config.pg_backup_host_dir }}"

  when: ansible_connection == 'local'

- name: create roles
  ansible.builtin.command:
    cmd: "podman run -it --rm --pod {{ mawus_config.podman_podname }} --env-file {{ mawus_config.podman_env_dir }}/maw-postgres.env --volume {{ pginit_dir }}:/postgres_init:rw,Z docker.io/postgres:{{ mawus_config.version_postgres }} psql -h 127.0.0.1 -U postgres -f /postgres_init/roles.sql"

- name: set role passwords
  ansible.builtin.command:
    cmd: "podman run -it --rm --pod {{ mawus_config.podman_podname }} --env-file {{ mawus_config.podman_env_dir }}/maw-postgres.env docker.io/postgres:{{ mawus_config.version_postgres }} psql -h 127.0.0.1 -U postgres -d postgres -c \"ALTER ROLE {{ item.username }} WITH PASSWORD '{{ item.password }}';\""
  loop_control:
    label: "{{ item.username }}"
  loop:
    - username: "{{ mawus_config.sql_username }}"
      password: "{{ mawus_config.sql_password }}"
    - username: idsrv
      password: "{{ mawus_config.sql_idsrv_password }}"
    - username: svc_solr
      password: "{{ mawus_config.sql_solr_password }}"

- name: test if idsrv exists
  ansible.builtin.command:
    cmd: "podman run -it --rm --pod {{ mawus_config.podman_podname }} --env-file {{ mawus_config.podman_env_dir }}/maw-postgres.env docker.io/postgres:{{ mawus_config.version_postgres }} psql -h 127.0.0.1 -U postgres -d idsrv -c 'SELECT 1;'"
  ignore_errors: yes
  register: idsrv_test

- name: restore idsrv database
  ansible.builtin.command:
    cmd: "podman run -it --rm --pod {{ mawus_config.podman_podname }} --env-file {{ mawus_config.podman_env_dir }}/maw-postgres.env --volume {{ pginit_dir }}:/postgres_init:rw,Z docker.io/postgres:{{ mawus_config.version_postgres }} pg_restore -h 127.0.0.1 -U postgres -C -d postgres '/postgres_init/{{ mawus_config.pg_backup_idsrv }}'"
  when: idsrv_test.rc == 2

- name: optimize idsrv database
  ansible.builtin.command:
    cmd: "podman run -it --rm --pod {{ mawus_config.podman_podname }} --env-file {{ mawus_config.podman_env_dir }}/maw-postgres.env docker.io/postgres:{{ mawus_config.version_postgres }} psql -h 127.0.0.1 -U postgres -d idsrv -c 'VACUUM ANALYZE;'"
  when: idsrv_test.rc == 2

- name: test if maw_website exists
  ansible.builtin.command:
    cmd: "podman run -it --rm --pod {{ mawus_config.podman_podname }} --env-file {{ mawus_config.podman_env_dir }}/maw-postgres.env docker.io/postgres:{{ mawus_config.version_postgres }} psql -h 127.0.0.1 -U postgres -d maw_website -c 'SELECT 1;'"
  ignore_errors: yes
  register: maw_website_test

- name: restore maw_website database
  ansible.builtin.command:
    cmd: "podman run -it --rm --pod {{ mawus_config.podman_podname }} --env-file {{ mawus_config.podman_env_dir }}/maw-postgres.env --volume {{ pginit_dir }}:/postgres_init:rw,Z docker.io/postgres:{{ mawus_config.version_postgres }} pg_restore -h 127.0.0.1 -U postgres -C -d postgres '/postgres_init/{{ mawus_config.pg_backup_www }}'"
  when: maw_website_test.rc == 2

- name: optimize maw_website database
  ansible.builtin.command:
    cmd: "podman run -it --rm --pod {{ mawus_config.podman_podname }} --env-file {{ mawus_config.podman_env_dir }}/maw-postgres.env docker.io/postgres:{{ mawus_config.version_postgres }} psql -h 127.0.0.1 -U postgres -d maw_website -c 'VACUUM ANALYZE;'"
  when: maw_website_test.rc == 2

- name: "remove temp {{ pginit_dir }} directory for remote connections"
  ansible.builtin.file:
    path: "{{ pginit_dir }}"
    state: absent
  when: ansible_connection != 'local'
