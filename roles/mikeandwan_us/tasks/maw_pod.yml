---
- name: Define tmp dir variable
  ansible.builtin.set_fact:
    mawus_pod__tempdir: "{{ remote_home_dir }}/_tmp_ansible_maw_pod"

- name: Prepare temp dir
  ansible.builtin.file:
    path: "{{ mawus_pod__tempdir }}"
    state: directory
    mode: u+rw

- name: Prepare postgres init script
  ansible.builtin.template:
    src: postgres_init/configure_pg_hba.sh.j2
    dest: "{{ mawus_pod__tempdir }}/configure_pg_hba.sh"
    mode: u+x

- name: Copy init script to volume
  ansible.builtin.include_role:
    name: podman_copy
  vars:
    pod_cp__src_dir_or_volume: "{{ mawus_pod__tempdir }}"
    pod_cp__dest_dir_or_volume: "{{ postgres_volume_init.volume.Name }}"

- name: Delete temp dir
  ansible.builtin.file:
    path: "{{ mawus_pod__tempdir }}"
    state: absent

# stop pod via systemd, otherwise systemd and podman fight
- name: Disable mawus via systemd
  ansible.builtin.systemd:
    name: "pod-{{ mawus__podman_pod }}"
    enabled: false
    state: stopped
    scope: user
  ignore_errors: true # nothing to stop if it doesn't exist
  tags: skip_ansible_lint

- name: get pod info
  containers.podman.podman_pod_info:
    name: "{{ mawus__podman_pod }}"
  register: podinfo

- name: stop pod if running
  containers.podman.podman_pod:
    name: "{{ mawus__podman_pod }}"
    state: stopped
  when: (podinfo.pods | length > 0) and (podinfo.pods[0].State == 'Running')

- name: "create {{ mawus__podman_pod }} pod"
  containers.podman.podman_pod:
    name: "{{ mawus__podman_pod }}"
    state: started
    publish: "{{ mawus__podman_publish_ports if mawus__podman_publish_ports is iterable else [] }}"

- name: maw-postgres container
  containers.podman.podman_container:
    name: "{{ mawus__env }}-maw-postgres"
    pod: "{{ mawus__podman_pod }}"
    image: "{{ mawus__podman_image_postgres }}"
    state: started
    env_file: "{{ mawus__podman_env_dir }}/maw-postgres.env"
    volume:
      - "{{ postgres_volume_init.volume.Name }}:/docker-entrypoint-initdb.d:ro,z"
      - "{{ postgres_volume.volume.Name }}:/var/lib/postgresql/data:rw,z"
    label:
      io.containers.autoupdate: image
  register: postgres_container

- name: wait for postgres container
  ansible.builtin.include_role:
    name: podman_wait_for_start
  vars:
    pod_start__container_name: "{{ postgres_container.container.Name }}"

- name: include maw_postgres_init.yml
  ansible.builtin.include_tasks: maw_postgres_init.yml

- name: set the dir / volume variables
  ansible.builtin.set_fact:
    cert_vol: "{{ maw_cert_volume.volume is defined | ternary(maw_cert_volume.volume.Name, mawus__certs_dir) }}"
    google_creds_vol: "{{ google_creds_volume.volume.Name }}"

- name: files container block
  block:

    - name: maw-files container
      containers.podman.podman_container:
        name: "{{ mawus__env }}-maw-files"
        pod: "{{ mawus__podman_pod }}"
        image: "{{ mawus__podman_image_files }}"
        state: started
        volume:
          - "{{ cert_vol }}:/certs:ro,z"
        label:
          io.containers.autoupdate: image
      register: files_container

    - name: wait for files container
      ansible.builtin.include_role:
        name: podman_wait_for_start
      vars:
        pod_start__container_name: "{{ files_container.container.Name }}"

  when: mawus__podman_image_files | length > 0

- name: photos container block
  block:

    - name: maw-photos container
      containers.podman.podman_container:
        name: "{{ mawus__env }}-maw-photos"
        pod: "{{ mawus__podman_pod }}"
        image: "{{ mawus__podman_image_photos }}"
        state: started
        volume:
          - "{{ cert_vol }}:/certs:ro,z"
        label:
          io.containers.autoupdate: image
      register: photos_container

    - name: wait for photos container
      ansible.builtin.include_role:
        name: podman_wait_for_start
      vars:
        pod_start__container_name: "{{ photos_container.container.Name }}"

  when: mawus__podman_image_photos | length > 0

- name: gateway container block
  block:

    - name: define common volumes for gateway
      ansible.builtin.set_fact:
        gateway_volumes:
          - "{{ cert_vol }}:/certs:ro,z"
          - "{{ asset_dir_root }}:/assets:ro"

    - name: define prod only volumes for gateway (letsencrypt)
      ansible.builtin.set_fact:
        gateway_volumes_prod:
          - "{{ certbot_validation_volume.volume.Name }}:/var/www/certbot:ro,z"
          - "{{ certbot_certs_volume.volume.Name }}:/etc/letsencrypt:ro,z"
      when: mawus__env == 'prod'

    - name: merge all volumes needed for gateway
      ansible.builtin.set_fact:
        gateway_volumes: "{{ gateway_volumes + gateway_volumes_prod }}"
      when: mawus__env == 'prod'

    - name: maw-gateway container
      containers.podman.podman_container:
        name: "{{ mawus__env }}-maw-gateway"
        pod: "{{ mawus__podman_pod }}"
        image: "{{ mawus__podman_image_gateway }}"
        state: started
        volume: "{{ gateway_volumes }}"
        security_opt:
          - label=disable
        label:
          io.containers.autoupdate: image
      register: gateway_container

    - name: wait for gateway container
      ansible.builtin.include_role:
        name: podman_wait_for_start
      vars:
        pod_start__container_name: "{{ gateway_container.container.Name }}"

  when: mawus__podman_image_gateway | length > 0

- name: Ensure user systemd directory exists
  ansible.builtin.file:
    path: "{{ mawus__systemd_dir }}"
    state: directory
    mode: u+rwx

# manually creating these as containers.podman.podman_pod generate_systemd was not
# producing the individual container service files for some reason
- name: Create systemd unit files (manually)
  ansible.builtin.command:
    cmd: "podman generate systemd -f -n --new {{ mawus__podman_pod }}"
    chdir: "{{ mawus__systemd_dir }}"
  changed_when: true

- name: Configure container order
  ansible.builtin.lineinfile:
    path: "{{ mawus__systemd_dir }}/{{ item.unitfile }}"
    insertafter: ^After=.*$
    line: "Before={{ item.before }}"
  loop:
    - unitfile: "container-{{ mawus__env }}-maw-api.service"
      before: "container-{{ mawus__env }}-maw-gateway.service"
    - unitfile: "container-{{ mawus__env }}-maw-auth.service"
      before: "container-{{ mawus__env }}-maw-gateway.service"
    - unitfile: "container-{{ mawus__env }}-maw-files.service"
      before: "container-{{ mawus__env }}-maw-gateway.service"
    - unitfile: "container-{{ mawus__env }}-maw-photos.service"
      before: "container-{{ mawus__env }}-maw-gateway.service"
    - unitfile: "container-{{ mawus__env }}-maw-postgres.service"
      before: "container-{{ mawus__env }}-maw-api.service container-{{ mawus__env }}-maw-auth.service container-{{ mawus__env }}-maw-www.service container-{{ mawus__env }}-maw-cache-sync.service"
    - unitfile: "container-{{ mawus_redis__container }}.service"
      before: "container-{{ mawus__env }}-maw-api.service container-{{ mawus__env }}-maw-www.service container-{{ mawus__env }}-maw-cache-sync.service"
    - unitfile: "container-{{ mawus__env }}-maw-solr.service"
      before: "container-{{ mawus__env }}-maw-api.service container-{{ mawus__env }}-maw-www.service"
    - unitfile: "container-{{ mawus__env }}-maw-www.service"
      before: "container-{{ mawus__env }}-maw-gateway.service"
  when: (mawus__env == 'prod') or (mawus__env == 'test')

- name: Start and/or Enable mawus via systemd
  ansible.builtin.systemd:
    daemon_reload: true
    name: "pod-{{ mawus__podman_pod }}"
    enabled: "{{ mawus__env == 'prod' }}"
    state: started
    scope: user
