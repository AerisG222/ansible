---
# stop pod via systemd, otherwise systemd and podman fight
- name: Disable maw via systemd
  ansible.builtin.systemd:
    name: "pod-{{ maw__podman_pod }}"
    enabled: false
    state: stopped
    scope: user
  ignore_errors: true # nothing to stop if it doesn't exist
  tags: skip_ansible_lint

- name: get pod info
  containers.podman.podman_pod_info:
    name: "{{ maw__podman_pod }}"
  register: podinfo

- name: stop pod if running
  containers.podman.podman_pod:
    name: "{{ maw__podman_pod }}"
    state: stopped
  when: (podinfo.pods | length > 0) and (podinfo.pods[0].State == 'Running')

- name: "create {{ maw__podman_pod }} pod"
  containers.podman.podman_pod:
    name: "{{ maw__podman_pod }}"
    state: started
    publish: "{{ maw__podman_publish_ports if maw__podman_publish_ports is iterable else [] }}"

- name: set the dir / volume variables
  ansible.builtin.set_fact:
    cert_vol: "{{ maw_cert_volume.volume is defined | ternary(maw_cert_volume.volume.Name, maw__certs_dir) }}"
    google_creds_vol: "{{ google_creds_volume.volume.Name }}"

- name: Ensure user systemd directory exists
  ansible.builtin.file:
    path: "{{ maw__systemd_dir }}"
    state: directory
    mode: u+rwx

# manually creating these as containers.podman.podman_pod generate_systemd was not
# producing the individual container service files for some reason
- name: Create systemd unit files (manually)
  ansible.builtin.command:
    cmd: "podman generate systemd -f -n --new {{ maw__podman_pod }}"
    chdir: "{{ maw__systemd_dir }}"
  changed_when: true

- name: Configure container order
  ansible.builtin.lineinfile:
    path: "{{ maw__systemd_dir }}/{{ item.unitfile }}"
    insertafter: ^After=.*$
    line: "Before={{ item.before }}"
  loop:
    - unitfile: "container-{{ maw__env }}-maw-api.service"
      before: "container-{{ maw__env }}-maw-gateway.service"
    - unitfile: "container-{{ maw__env }}-maw-auth.service"
      before: "container-{{ maw__env }}-maw-gateway.service"
    - unitfile: "container-{{ maw__env }}-maw-files.service"
      before: "container-{{ maw__env }}-maw-gateway.service"
    - unitfile: "container-{{ maw__env }}-maw-photos.service"
      before: "container-{{ maw__env }}-maw-gateway.service"
    - unitfile: "container-{{ maw__env }}-maw-postgres.service"
      before: "container-{{ maw__env }}-maw-api.service container-{{ maw__env }}-maw-auth.service container-{{ maw__env }}-maw-www.service container-{{ maw__env }}-maw-cache-sync.service"
    - unitfile: "container-{{ maw_redis__container }}.service"
      before: "container-{{ maw__env }}-maw-api.service container-{{ maw__env }}-maw-www.service container-{{ maw__env }}-maw-cache-sync.service"
    - unitfile: "container-{{ maw__env }}-maw-solr.service"
      before: "container-{{ maw__env }}-maw-api.service container-{{ maw__env }}-maw-www.service"
    - unitfile: "container-{{ maw__env }}-maw-www.service"
      before: "container-{{ maw__env }}-maw-gateway.service"
  when: (maw__env == 'prod') or (maw__env == 'test')

- name: Start and/or Enable maw via systemd
  ansible.builtin.systemd:
    daemon_reload: true
    name: "pod-{{ maw__podman_pod }}"
    enabled: "{{ maw__env == 'prod' }}"
    state: started
    scope: user
