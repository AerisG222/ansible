---
- name: Prepare postgres init script
  ansible.builtin.template:
    src: postgres_init/configure_pg_hba.sh.j2
    dest: configure_pg_hba.sh
    mode: u+x

- name: Copy init script to volume
  ansible.builtin.include_role:
    name: podman_copy_to_volume
  vars:
    volume_name: "{{ postgres_volume_init.volume.Name }}"
    src_path: configure_pg_hba.sh

- name: Delete temp file
  ansible.builtin.file:
    path: configure_pg_hba.sh
    state: absent

# stop pod via systemd, otherwise systemd and podman fight
- name: Disable mawus via systemd
  ansible.builtin.systemd:
    name: "pod-{{ mawus_config.podman_podname }}"
    enabled: no
    state: stopped
    scope: user
  ignore_errors: true # nothing to stop if it doesn't exist

- name: "create {{ mawus_config.podman_podname }} pod"
  containers.podman.podman_pod:
    name: "{{ mawus_config.podman_podname }}"
    state: started
    publish: "{{ mawus_config.podman_publish_ports if mawus_config.podman_publish_ports is iterable else [] }}"

- name: redis container
  containers.podman.podman_container:
    name: "{{ mawus_config.env }}-maw-redis"
    pod: "{{ mawus_config.podman_podname }}"
    image: "docker.io/redis:{{ mawus_config.version_redis }}-alpine"
    command: redis-server --save 60 1
    state: started
    volume:
      - "{{ redis_volume.volume.Name }}:/data:rw,z"
    label:
      io.containers.autoupdate: image
  register: redis_container

- name: wait for redis container
  ansible.builtin.include_tasks: wait_for_container_to_start.yml
  vars:
    container_name: "{{ redis_container.container.Name }}"

- name: maw-postgres container
  containers.podman.podman_container:
    name: "{{ mawus_config.env }}-maw-postgres"
    pod: "{{ mawus_config.podman_podname }}"
    image: "docker.io/postgres:{{ mawus_config.version_postgres }}-alpine"
    state: started
    env_file: "{{ mawus_config.podman_env_dir }}/maw-postgres.env"
    volume:
      - "{{ postgres_volume_init.volume.Name }}:/docker-entrypoint-initdb.d:ro,z"
      - "{{ postgres_volume.volume.Name }}:/var/lib/postgresql/data:rw,z"
    label:
      io.containers.autoupdate: image
  register: postgres_container

- name: wait for postgres container
  ansible.builtin.include_tasks: wait_for_container_to_start.yml
  vars:
    container_name: "{{ postgres_container.container.Name }}"

- name: include maw_postgres_init.yml
  ansible.builtin.include_tasks: maw_postgres_init.yml

- name: maw-cache-sync container
  containers.podman.podman_container:
    name: "{{ mawus_config.env }}-maw-cache-sync"
    pod: "{{ mawus_config.podman_podname }}"
    image: "{{ mawus_config.podman_image_cache_sync }}"
    env_file: "{{ mawus_config.podman_env_dir }}/maw-cache-sync.env"
    state: started
    label:
      io.containers.autoupdate: image
  register: cache_sync_container

- name: wait for maw-cache-sync container
  ansible.builtin.include_tasks: wait_for_container_to_start.yml
  vars:
    container_name: "{{ cache_sync_container.container.Name }}"

- name: maw-solr container
  containers.podman.podman_container:
    name: "{{ mawus_config.env }}-maw-solr"
    pod: "{{ mawus_config.podman_podname }}"
    image: "docker.io/solr:{{ mawus_config.version_solr }}"
    state: started
    volume:
      - "{{ solr_volume.volume.Name }}:/var/solr:rw,z"
    label:
      io.containers.autoupdate: image
  register: solr_container

- name: wait for solr container
  ansible.builtin.include_tasks: wait_for_container_to_start.yml
  vars:
    container_name: "{{ solr_container.container.Name }}"

- name: include maw_solr_init.yml
  ansible.builtin.include_tasks: maw_solr_init.yml

- name: auth container block
  block:

    - name: maw-auth container
      containers.podman.podman_container:
        name: "{{ mawus_config.env }}-maw-auth"
        pod: "{{ mawus_config.podman_podname }}"
        image: "{{ mawus_config.podman_image_auth }}"
        state: started
        env_file: "{{ mawus_config.podman_env_dir }}/maw-auth.env"
        volume:
          - "{{ maw_cert_volume.volume.Name }}:/certs:ro,z"
          - "{{ auth_dataprotection_volume.volume.Name }}:/dataprotection:rw,Z"
          - "{{ google_creds_volume.volume.Name }}:/google-creds:ro,z"
        label:
          io.containers.autoupdate: image
      register: auth_container

    - name: wait for auth container
      ansible.builtin.include_tasks: wait_for_container_to_start.yml
      vars:
        container_name: "{{ auth_container.container.Name }}"

  when: mawus_config.podman_image_auth | length > 0

- name: api container block
  block:

    - name: maw-api container
      containers.podman.podman_container:
        name: "{{ mawus_config.env }}-maw-api"
        pod: "{{ mawus_config.podman_podname }}"
        image: "{{ mawus_config.podman_image_api }}"
        state: started
        env_file: "{{ mawus_config.podman_env_dir }}/maw-api.env"
        security_opt:
          - label=disable
        volume:
          - "{{ maw_cert_volume.volume.Name }}:/certs:ro,z"
          - "{{ api_dataprotection_volume.volume.Name }}:/dataprotection:rw,Z"
          - "{{ uploads_volume.volume.Name }}:/maw-uploads:rw,z"
          - "{{ mawus_config.asset_dir_images }}:/srv/www/website_assets/images:ro"
        label:
          io.containers.autoupdate: image
      register: api_container

    - name: wait for api container
      ansible.builtin.include_tasks: wait_for_container_to_start.yml
      vars:
        container_name: "{{ api_container.container.Name }}"

  when: mawus_config.podman_image_api | length > 0

- name: www container block
  block:

    - name: maw-www container
      containers.podman.podman_container:
        name: "{{ mawus_config.env }}-maw-www"
        pod: "{{ mawus_config.podman_podname }}"
        image: "{{ mawus_config.podman_image_www }}"
        state: started
        env_file: "{{ mawus_config.podman_env_dir }}/maw-www.env"
        security_opt:
          - label=disable
        volume:
          - "{{ maw_cert_volume.volume.Name }}:/certs:ro,z"
          - "{{ www_dataprotection_volume.volume.Name }}:/dataprotection:rw,Z"
          - "{{ google_creds_volume.volume.Name }}:/google-creds:ro,z"
          - "{{ mawus_config.asset_dir_images }}:/srv/www/website_assets/images:ro"
          - "{{ mawus_config.asset_dir_movies }}:/srv/www/website_assets/movies:ro"
        label:
          io.containers.autoupdate: image
      register: www_container

    - name: wait for www container
      ansible.builtin.include_tasks: wait_for_container_to_start.yml
      vars:
        container_name: "{{ www_container.container.Name }}"

  when: mawus_config.podman_image_www | length > 0

- name: files container block
  block:

    - name: maw-files container
      containers.podman.podman_container:
        name: "{{ mawus_config.env }}-maw-files"
        pod: "{{ mawus_config.podman_podname }}"
        image: "{{ mawus_config.podman_image_files }}"
        state: started
        volume:
          - "{{ maw_cert_volume.volume.Name }}:/certs:ro,z"
        label:
          io.containers.autoupdate: image
      register: files_container

    - name: wait for files container
      ansible.builtin.include_tasks: wait_for_container_to_start.yml
      vars:
        container_name: "{{ files_container.container.Name }}"

  when: mawus_config.podman_image_files | length > 0

- name: photos container block
  block:

    - name: maw-photos container
      containers.podman.podman_container:
        name: "{{ mawus_config.env }}-maw-photos"
        pod: "{{ mawus_config.podman_podname }}"
        image: "{{ mawus_config.podman_image_photos }}"
        state: started
        volume:
          - "{{ maw_cert_volume.volume.Name }}:/certs:ro,z"
        label:
          io.containers.autoupdate: image
      register: photos_container

    - name: wait for photos container
      ansible.builtin.include_tasks: wait_for_container_to_start.yml
      vars:
        container_name: "{{ photos_container.container.Name }}"

  when: mawus_config.podman_image_photos | length > 0

- name: gateway container block
  block:

    - name: maw-gateway container
      containers.podman.podman_container:
        name: "{{ mawus_config.env }}-maw-gateway"
        pod: "{{ mawus_config.podman_podname }}"
        image: "{{ mawus_config.podman_image_gateway }}"
        state: started
        volume: "{{ mawus_config.gateway_volumes }}"
        security_opt:
          - label=disable
        label:
          io.containers.autoupdate: image
      register: gateway_container

    - name: wait for gateway container
      ansible.builtin.include_tasks: wait_for_container_to_start.yml
      vars:
        container_name: "{{ gateway_container.container.Name }}"

  when: mawus_config.podman_image_gateway | length > 0

- name: Ensure user systemd directory exists
  ansible.builtin.file:
    path: "{{ mawus_config.systemd_dir }}"
    state: directory

# manually creating these as containers.podman.podman_pod generate_systemd was not
# producing the individual container service files for some reason
- name: Create systemd unit files (manually)
  ansible.builtin.command:
    cmd: "podman generate systemd -f -n --new {{ mawus_config.podman_podname }}"
    chdir: "{{ mawus_config.systemd_dir }}"

- name: Configure container order
  ansible.builtin.lineinfile:
    path: "{{ mawus_config.systemd_dir }}/{{ item.unitfile }}"
    insertafter: ^After=.*$
    line: "Before={{ item.before }}"
  loop:
    - unitfile: "container-{{ mawus_config.env }}-maw-api.service"
      before: "container-{{ mawus_config.env }}-maw-gateway.service"
    - unitfile: "container-{{ mawus_config.env }}-maw-auth.service"
      before: "container-{{ mawus_config.env }}-maw-gateway.service"
    - unitfile: "container-{{ mawus_config.env }}-maw-files.service"
      before: "container-{{ mawus_config.env }}-maw-gateway.service"
    - unitfile: "container-{{ mawus_config.env }}-maw-photos.service"
      before: "container-{{ mawus_config.env }}-maw-gateway.service"
    - unitfile: "container-{{ mawus_config.env }}-maw-postgres.service"
      before: "container-{{ mawus_config.env }}-maw-api.service container-{{ mawus_config.env }}-maw-auth.service container-{{ mawus_config.env }}-maw-www.service container-{{ mawus_config.env }}-maw-cache-sync.service"
    - unitfile: "container-{{ mawus_config.env }}-maw-redis.service"
      before: "container-{{ mawus_config.env }}-maw-api.service container-{{ mawus_config.env }}-maw-www.service container-{{ mawus_config.env }}-maw-cache-sync.service"
    - unitfile: "container-{{ mawus_config.env }}-maw-solr.service"
      before: "container-{{ mawus_config.env }}-maw-api.service container-{{ mawus_config.env }}-maw-www.service"
    - unitfile: "container-{{ mawus_config.env }}-maw-www.service"
      before: "container-{{ mawus_config.env }}-maw-gateway.service"
  when: mawus_config.env != 'local'

- name: Start and/or Enable mawus via systemd
  ansible.builtin.systemd:
    daemon_reload: true
    name: "pod-{{ mawus_config.podman_podname }}"
    enabled: "{{ mawus_config.env == 'prod' }}"
    state: started
    scope: user
