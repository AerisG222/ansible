---
- name: Configure mikeandwan.us prod environment
  hosts: mawus_prod
  vars_files:
    - "{{ controller_secrets_file }}"

  tasks:
    # - name: Include maw_admin_scripts
    #   ansible.builtin.include_role:
    #     name: maw_admin_scripts
    #     apply:
    #       become: true
    #       become_user: "{{ mawus_config_prod.service_account.username }}"
    #   vars:
    #     maw_as__dir: "{{ remote_mawus_root }}/admin_scripts"
    #     maw_as__do_backup: "{{ mawus_config_prod.env == 'prod' }}"
    #     maw_as__pod: "{{ mawus_config_prod.podman_podname }}"
    #     maw_as__postgres_envfile: "{{ mawus_config_prod.podman_env_dir }}/maw-postgres.env"
    #     maw_as__postgres_image: "{{ mawus_config_prod.podman_image_postgres }}"
    #     maw_as__certbot_image: "{{ mawus_config_prod.podman_image_certbot }}"
    #     maw_as__gdrive_image: "{{ mawus_config_prod.podman_image_gdrive }}"
    #     maw_as__cache_sync_image: "{{ mawus_config_prod.podman_image_cache_sync }}"
    #     maw_as__maw_certs_image: "{{ mawus_config_prod.podman_image_maw_certs }}"
    #     maw_as__reverse_geocode_image: "{{ mawus_config_prod.podman_image_reverse_geocode }}"
    #     maw_as__solr_indexer: "{{ mawus_config_prod.podman_image_solr_indexer }}"

    # - name: Include certbot_certs
    #   ansible.builtin.include_role:
    #     name: certbot_renew
    #     apply:
    #       become: true
    #       become_user: "{{ mawus_config_prod.service_account.username }}"
    #   vars:
    #     cb__systemd_dir: "{{ remote_home_dir }}/.config/systemd/user"
    #     cb__service_name: "{{ mawus_config_prod.env }}-certbot-renew"
    #     cb__start_job: false
    #     cb__enable_job: "{{ mawus_config_prod.env == 'prod' }}"
    #     cb__calendar: '0/12:00:00'
    #     cb__pod: "{{ mawus_config_prod.podman_podname }}"
    #     cb__container_image: "{{ mawus_config_prod.podman_image_certbot }}"
    #     cb__validation_volume: cbval
    #     cb__certs_volume: cbcerts

    # - name: Configure Base
    #   ansible.builtin.include_role:
    #     name: fedora_base

    # - name: podman alpine
    #   ansible.builtin.include_role:
    #     name: podman_alpine
    #   vars:
    #     pod_alpine__command: ls -a

    # - name: test skipping copy when source directory does not exist
    #   ansible.builtin.include_role:
    #     name: podman_copy
    #   vars:
    #     pod_cp__src_dir_or_volume: /home/mmorano/non-existent-directory
    #     pod_cp__dest_dir_or_volume: non-existent-volume
    #     pod_cp__skip_if_src_not_exists: true

    # - name: test skipping copy when source volume does not exist
    #   ansible.builtin.include_role:
    #     name: podman_copy
    #   vars:
    #     pod_cp__src_dir_or_volume: non-existent-volume
    #     pod_cp__dest_dir_or_volume: non-existent-volume
    #     pod_cp__skip_if_src_not_exists: true

    # - name: test copying files from host dir to container volume
    #   ansible.builtin.include_role:
    #     name: podman_copy
    #   vars:
    #     pod_cp__src_dir_or_volume: /home/mmorano/test
    #     pod_cp__dest_dir_or_volume: test-vol-1

    # - name: test copying files from container volume to container volume
    #   ansible.builtin.include_role:
    #     name: podman_copy
    #   vars:
    #     pod_cp__src_dir_or_volume: test-vol-1
    #     pod_cp__dest_dir_or_volume: test-vol-2

    # - name: test copying files from container volume to host dir
    #   ansible.builtin.include_role:
    #     name: podman_copy
    #   vars:
    #     pod_cp__src_dir_or_volume: test-vol-2
    #     pod_cp__dest_dir_or_volume: /home/mmorano/test-3

    # - name: test creating pg cleanup job
    #   ansible.builtin.include_role:
    #     name: postgres_backup_cleanup
    #   vars:
    #     pg_clean__systemd_dir: /home/mmorano/.config/systemd/user
    #     pg_clean__service: pg_cleanup
    #     pg_clean__pod: test-pod
    #     pg_clean__volume: test-volume
    #     pg_clean__postgres_image: postgres
    #     pg_clean__calendar: '00:00:00'

    # - name: test creating pg backup job
    #   ansible.builtin.include_role:
    #     name: postgres_backup_database
    #   vars:
    #     pg_bu_db__systemd_dir: /home/mmorano/.config/systemd/user
    #     pg_bu_db__service: pg_backup
    #     pg_bu_db__pod: test-pod
    #     pg_bu_db__volume: test-volume
    #     pg_bu_db__envfile: /path/to/envfile.env
    #     pg_bu_db__postgres_image: postgres
    #     pg_bu_db__db: my-db
    #     pg_bu_db__calendar: '00:00:00'

    - name: test creating pg backup roles
      ansible.builtin.include_role:
        name: postgres_backup_roles
      vars:
        pg_bu_roles__systemd_dir: /home/mmorano/.config/systemd/user
        pg_bu_roles__service: pg_backup_roles
        pg_bu_roles__pod: test-pod
        pg_bu_roles__volume: test-volume
        pg_bu_roles__envfile: /path/to/envfile.env
        pg_bu_roles__postgres_image: postgres
        pg_bu_roles__calendar: '00:00:00'
