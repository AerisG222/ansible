---
- name: Configure mikeandwan.us prod environment
  hosts: maw_prod
  gather_facts: false
  vars_files:
    - "{{ controller_secrets_file }}"

  tasks:
    # - name: Include maw_admin_scripts
    #   ansible.builtin.include_role:
    #     name: maw_admin_scripts
    #     apply:
    #       become: true
    #       become_user: "{{ maw_host__username }}"
    #   vars:
    #     maw_as__dir: "{{ remote_maw_root }}/admin_scripts"
    #     maw_as__do_backup: "{{ maw__env == 'prod' }}"
    #     maw_as__pod: "{{ maw__podman_podname }}"
    #     maw_as__postgres_envfile: "{{ maw__podman_env_dir }}/maw-postgres.env"
    #     maw_as__postgres_image: "{{ maw__podman_image_postgres }}"
    #     maw_as__certbot_image: "{{ maw__podman_image_certbot }}"
    #     maw_as__gdrive_image: "{{ maw__podman_image_gdrive }}"
    #     maw_as__cache_sync_image: "{{ maw__podman_image_cache_sync }}"
    #     maw_as__maw_certs_image: "{{ maw__podman_image_maw_certs }}"
    #     maw_as__reverse_geocode_image: "{{ maw__podman_image_reverse_geocode }}"
    #     maw_as__solr_indexer: "{{ maw__podman_image_solr_indexer }}"

    # - name: Include certbot_certs
    #   ansible.builtin.include_role:
    #     name: certbot_renew
    #     apply:
    #       become: true
    #       become_user: "{{ maw_host__username }}"
    #   vars:
    #     cb__systemd_dir: "{{ remote_home_dir }}/.config/systemd/user"
    #     cb__service_name: "{{ maw__env }}-certbot-renew"
    #     cb__start_job: false
    #     cb__enable_job: "{{ maw__env == 'prod' }}"
    #     cb__calendar: '0/12:00:00'
    #     cb__pod: "{{ maw__podman_podname }}"
    #     cb__container_image: "{{ maw__podman_image_certbot }}"
    #     cb__validation_volume: cbval
    #     cb__certs_volume: cbcerts

    # - name: Configure Base
    #   ansible.builtin.include_role:
    #     name: fedora_base

    # - name: podman alpine
    #   ansible.builtin.include_role:
    #     name: podman_alpine
    #   vars:
    #     pod_alpine__command: ls -a

    # - name: test skipping copy when source directory does not exist
    #   ansible.builtin.include_role:
    #     name: podman_copy
    #   vars:
    #     pod_cp__src_dir_or_volume: /home/mmorano/non-existent-directory
    #     pod_cp__dest_dir_or_volume: non-existent-volume
    #     pod_cp__skip_if_src_not_exists: true

    # - name: test skipping copy when source volume does not exist
    #   ansible.builtin.include_role:
    #     name: podman_copy
    #   vars:
    #     pod_cp__src_dir_or_volume: non-existent-volume
    #     pod_cp__dest_dir_or_volume: non-existent-volume
    #     pod_cp__skip_if_src_not_exists: true

    # - name: test copying files from host dir to container volume
    #   ansible.builtin.include_role:
    #     name: podman_copy
    #   vars:
    #     pod_cp__src_dir_or_volume: /home/mmorano/test
    #     pod_cp__dest_dir_or_volume: test-vol-1

    # - name: test copying files from container volume to container volume
    #   ansible.builtin.include_role:
    #     name: podman_copy
    #   vars:
    #     pod_cp__src_dir_or_volume: test-vol-1
    #     pod_cp__dest_dir_or_volume: test-vol-2

    # - name: test copying files from container volume to host dir
    #   ansible.builtin.include_role:
    #     name: podman_copy
    #   vars:
    #     pod_cp__src_dir_or_volume: test-vol-2
    #     pod_cp__dest_dir_or_volume: /home/mmorano/test-3

    # - name: test creating pg cleanup job
    #   ansible.builtin.include_role:
    #     name: postgres_backup_cleanup
    #   vars:
    #     pg_clean__systemd_dir: /home/mmorano/.config/systemd/user
    #     pg_clean__service: pg_cleanup
    #     pg_clean__pod: test-pod
    #     pg_clean__volume: test-volume
    #     pg_clean__postgres_image: postgres
    #     pg_clean__calendar: '00:00:00'

    # - name: test creating pg backup job
    #   ansible.builtin.include_role:
    #     name: postgres_backup_database
    #   vars:
    #     pg_bu_db__systemd_dir: /home/mmorano/.config/systemd/user
    #     pg_bu_db__service: pg_backup
    #     pg_bu_db__pod: test-pod
    #     pg_bu_db__volume: test-volume
    #     pg_bu_db__envfile: /path/to/envfile.env
    #     pg_bu_db__postgres_image: postgres
    #     pg_bu_db__db: my-db
    #     pg_bu_db__calendar: '00:00:00'

    # - name: test creating pg backup roles
    #   ansible.builtin.include_role:
    #     name: postgres_backup_roles
    #   vars:
    #     pg_bu_roles__systemd_dir: /home/mmorano/.config/systemd/user
    #     pg_bu_roles__service: pg_backup_roles
    #     pg_bu_roles__pod: test-pod
    #     pg_bu_roles__volume: test-volume
    #     pg_bu_roles__envfile: /path/to/envfile.env
    #     pg_bu_roles__postgres_image: postgres
    #     pg_bu_roles__calendar: '00:00:00'

    # - name: test creating pg archive service
    #   ansible.builtin.include_role:
    #     name: postgres_gdrive_archive
    #   vars:
    #     pg_archive__systemd_dir: /home/mmorano/.config/systemd/user
    #     pg_archive__service: pg_archive
    #     pg_archive__pod: test-pod
    #     pg_archive__files_to_archive_volume: test-volume
    #     pg_archive__credentials_volume: test-creds
    #     pg_archive__gdrive_image: postgres
    #     pg_archive__archive_folder: archive_folder
    #     pg_archive__retain_duration: '5d'
    #     pg_archive__calendar: '00:00:00'

    # - name: test creating pg optimization service
    #   ansible.builtin.include_role:
    #     name: postgres_optimize
    #   vars:
    #     pg_optimize__systemd_dir: /home/mmorano/.config/systemd/user
    #     pg_optimize__service: pg_optimize
    #     pg_optimize__pod: test-pod
    #     pg_optimize__envfile: /path/to/envfile.env
    #     pg_optimize__postgres_image: postgres
    #     pg_optimize__db: my_db
    #     pg_optimize__calendar: '00:00:00'

    # - name: test creating reverse geocoder service
    #   ansible.builtin.include_role:
    #     name: reverse_geocoder
    #   vars:
    #     maw_revgeo__systemd_dir: /home/mmorano/.config/systemd/user
    #     maw_revgeo__service: revgeo
    #     maw_revgeo__pod: test-pod
    #     maw_revgeo__volume: test-volume
    #     maw_revgeo__envfile: /path/to/envfile.env
    #     maw_revgeo__image: postgres
    #     maw_revgeo__calendar: '00:00:00'

    # - name: test creating solr indexer service
    #   ansible.builtin.include_role:
    #     name: solr_indexer
    #   vars:
    #     maw_solridx__systemd_dir: /home/mmorano/.config/systemd/user
    #     maw_solridx__service: solridx
    #     maw_solridx__pod: test-pod
    #     maw_solridx__image: simg
    #     maw_solridx__sql_username: usr
    #     maw_solridx__sql_password: pwd
    #     maw_solridx__calendar: '00:00:00'

    # - name: test setting up sshd
    #   ansible.builtin.include_role:
    #     name: sshd
    #   vars:
    #     sshd__allow_users:
    #       - "{{ ansible_user }}"
    #       - svc_ddclient

    - name: test running postgres backups
      ansible.builtin.include_role:
        name: maw_prod_backup
        apply:
          delegate_to: tifa
      vars:
        ansible_user: svc_www_maw
        maw_prod_backup__hostname: tifa
        maw_prod_backup__username: svc_www_maw
        maw_prod_backup__use_existing_backups: false
        maw_prod_backup__postgres_pod: maw-pod
        maw_prod_backup__postgres_image: docker.io/postgres:13-alpine
        maw_prod_backup__postgres_container: "dev-ansible-postgres-backup"
        maw_prod_backup__postgres_envfile: /home/svc_www_maw/maw-postgres-backup.env
        maw_prod_backup__control_dir_postgres: "/home/mmorano/ansible/db_backup_test"
        maw_prod_backup__temp_remote_dir_postgres: /home/svc_www_maw/_tmp_ansible_postgres_backup

